// Code Generated by Sidekick is for learning and experimentation purposes only.

let taskID = 1;

let assignees = [
    { id: 1, name: "Ajay Tanguturi" },
    { id: 2, name: "Madhav" },
    { id: 3, name: "Likhith" },
    { id: 4, name: "Manasa" },
    { id: 5, name: "Sai Kiran" },
    { id: 6, name: "Sravanthi" }
];

function getTypeIcon(type) {
    switch (type) {
        case 'Task':
            return '<i class="fas fa-tasks" style="color:gold;"></i>';
        case 'Bug':
            return '<i class="fas fa-bug" style="color:red;"></i>';
        case 'Feature':
            return '<i class="fas fa-star" style="color:blue;"></i>';
        default:
            return '';
    }
}

function saveTasks(tasks) {
    localStorage.setItem('tasks', JSON.stringify(tasks));
}

function loadTasks() {
    const tasks = localStorage.getItem('tasks');
    return tasks ? JSON.parse(tasks) : [];
}


function renderAssigneedropdown(list) {
    const $dropdown = $('#taskAssignee');
    $dropdown.empty();
    $dropdown.append('<option value="" disabled selected>Select Assignee</option>');
    list.forEach(user => {
        $dropdown.append(`<option value="${user.name}">${user.name}</option>`);
    });
}

function renderFilterAssigneeDropdown(list) {
    const $dropdown = $('#filterAssignee');
    $dropdown.empty();
    $dropdown.append('<option value="">All Assignees</option>');
    list.forEach(user => {
        $dropdown.append(`<option value="${user.name}">${user.name}</option>`);
    });
}

function renderTasks(tasksToRender) {
    $('#taskList').empty();
    tasksToRender.forEach((task, idx) => {
        const statusOptions = ['TODO', 'In Progress', 'Done']
            .map(opt => `<option value="${opt}"${task.status === opt ? ' selected' : ''}>${opt}</option>`)
            .join('');

        const assigneeOptions = assignees
            .map(user => `<option value="${user.name}"${task.assignee === user.name ? ' selected' : ''}>${user.name}</option>`)
            .join('');

        const taskRow = `
            <tr>
                <td>${getTypeIcon(task.type)} ${task.type}</td>
                <td>
                    <a href="task-details.html?key=${task.key}" class="task-key-link" style="color: #007bff; text-decoration: underline; cursor:pointer;" title="View Details for ${task.key}" target="_blank">${task.key}</a>
                </td>
                <td>${task.summary}</td>
                <td>
                    <select class="form-control assignee-dropdown" data-index="${idx}" style="color: blue;">${assigneeOptions}</select>
                </td>
                <td>
                    <select class="form-control status-dropdown" data-index="${idx}" style="color: green;">${statusOptions}</select>
                </td>
            </tr>
        `;
        $('#taskList').append(taskRow);
    });
}

function getFilteredTasks(tasks) {
    const key = $('#filterKey').val() ? $('#filterKey').val().trim().toLowerCase() : '';
    const summary = $('#filterSummary').val() ? $('#filterSummary').val().trim().toLowerCase() : '';
    const type = $('#filterType').val();
    const assignee = $('#filterAssignee').val();
    const status = $('#filterStatus').val();

    return tasks.filter(task => {
        const matchesKey = !key || task.key.toLowerCase().includes(key);
        const matchesSummary = !summary || task.summary.toLowerCase().includes(summary);
        const matchesType = !type || task.type === type;
        const matchesAssignee = !assignee || task.assignee === assignee;
        const matchesStatus = !status || task.status === status;
        return matchesKey && matchesSummary && matchesType && matchesAssignee && matchesStatus;
    });
}

$(function () {
    renderAssigneedropdown(assignees);
    renderFilterAssigneeDropdown(assignees);

    let tasks = loadTasks();
    if (tasks.length > 0) {
        const lastTask = tasks[tasks.length - 1];
        const lastID = parseInt(lastTask.key.split('-')[1], 10);
        if (!isNaN(lastID)) taskID = lastID + 1;
    }

  
    renderTasks(tasks);

    // Cancel button 
    $('#cancelForm').on('click', function (e) {
        e.preventDefault();
        $('#taskType').val('Task');
        $('#taskSummary').val('');
        $('#taskStatus').val('TODO');
        $('#taskAssignee').val(assignees[0].name);
    });

    // Form submit button
    $('#addTaskForm').on('submit', function (event) {
        event.preventDefault();

        const taskType = $('#taskType').val();
        const taskSummary = $('#taskSummary').val();
        const taskStatus = $('#taskStatus').val();
        const taskAssignee = $('#taskAssignee').val();
        const taskKey = `AJ-${taskID++}`;

        if (!taskType || !taskStatus || !taskAssignee) {
            alert('Please select a valid option for Type, Status, and Assignee.');
            return;
        }

        if (!taskSummary.trim()) {
            alert('Summary cannot be empty.');
            return;
        }

        const newTask = {
            type: taskType,
            key: taskKey,
            summary: taskSummary,
            assignee: taskAssignee,
            status: taskStatus
        };

        tasks.push(newTask);
        saveTasks(tasks);
        renderTasks(tasks);

        // Reset the form 
        $('#taskType').val('Task');
        $('#taskSummary').val('');
        $('#taskStatus').val('TODO');
        $('#taskAssignee').val(assignees[0].name);
    });

    // Status change 
    $('#taskList').on('change', '.status-dropdown', function () {
        const idx = $(this).data('index');
        const filteredTasks = getFilteredTasks(tasks);
        const taskToUpdate = filteredTasks[idx];
        if (taskToUpdate) {
            const originalIdx = tasks.findIndex(t => t.key === taskToUpdate.key);
            tasks[originalIdx].status = $(this).val();
            saveTasks(tasks);
            renderTasks(getFilteredTasks(tasks));
        }
    });

    // Assignee change 
    $('#taskList').on('change', '.assignee-dropdown', function () {
        const idx = $(this).data('index');
        const filteredTasks = getFilteredTasks(tasks);
        const taskToUpdate = filteredTasks[idx];
        if (taskToUpdate) {
            const originalIdx = tasks.findIndex(t => t.key === taskToUpdate.key);
            tasks[originalIdx].assignee = $(this).val();
            saveTasks(tasks);
            renderTasks(getFilteredTasks(tasks));
        }
    });

    // Filter event 
    $('#filterKey, #filterSummary').on('input', function () {
        renderTasks(getFilteredTasks(tasks));
    });
    $('#filterType, #filterAssignee, #filterStatus').on('change', function () {
        renderTasks(getFilteredTasks(tasks));
    });
    $('#clearFilters').on('click',function(){
        $('#filterKey').val('');
        $('#filterSummary').val();
        $('#filterType').val('');
        $('#filterAssignee').val('');
        $('#filterStatus').val('');
        renderTasks(tasks);
    
    })
});
